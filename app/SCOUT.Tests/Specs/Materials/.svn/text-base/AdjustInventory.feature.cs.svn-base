// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace SCOUT.Tests.Specs.Materials
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MaterialAdjustments")]
    public partial class MaterialAdjustmentsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AdjustInventory.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MaterialAdjustments", "In order to reflect actual inventory quantities\nAs a materials manager\nI want to " +
                    "adjust material in to and out of the system", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust material into inventory where item does not exist")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AdjustMaterialIntoInventoryWhereItemDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust material into inventory where item does not exist", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have input a valid Part Number");
#line 9
  testRunner.And("Input Source Type, Locations, and Comments");
#line 10
  testRunner.When("I click Adjust");
#line 11
  testRunner.Then("The Inventory Item should be created");
#line 12
   testRunner.And("The Inventory Qty should by the adjustment qty plus the starting qty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust material into inventory where item does exist")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AdjustMaterialIntoInventoryWhereItemDoesExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust material into inventory where item does exist", new string[] {
                        "mytag"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have input a valid Part Number");
#line 17
  testRunner.And("Input Source Type, Locations, and Comments");
#line 18
  testRunner.When("I click Adjust");
#line 19
  testRunner.Then("The Inventory Qty should by the adjustment qty plus the starting qty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust material out of inventory where item does not exist")]
        [NUnit.Framework.CategoryAttribute("myTag")]
        public virtual void AdjustMaterialOutOfInventoryWhereItemDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust material out of inventory where item does not exist", new string[] {
                        "myTag"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have input a valid Part Number");
#line 24
  testRunner.And("Input Source Type, Locations, and Comments");
#line 25
  testRunner.When("I click Adjust");
#line 26
  testRunner.Then("The I should see an error stating that the inventory item does not exist");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust material out of inventory where item does exist")]
        [NUnit.Framework.CategoryAttribute("myTag")]
        public virtual void AdjustMaterialOutOfInventoryWhereItemDoesExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust material out of inventory where item does exist", new string[] {
                        "myTag"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have input a valid Part Number");
#line 31
  testRunner.And("Input Source Type, Locations, and Comments");
#line 32
  testRunner.When("I Click Adjust");
#line 33
  testRunner.Then("The Inventory Qty should be the adjustment qty minus the starting qty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust material in or out where Part Number is invalid")]
        [NUnit.Framework.CategoryAttribute("myTag")]
        public virtual void AdjustMaterialInOrOutWherePartNumberIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust material in or out where Part Number is invalid", new string[] {
                        "myTag"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have input a invalid Part Number");
#line 38
 testRunner.When("I Click Adjust");
#line 39
 testRunner.Then("I Should see an error stating the Part Number is invalid");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
