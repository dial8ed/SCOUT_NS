//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace SCOUT.Core.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DellPreAlert_Rev1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DellPreAlert_Rev1 : global::System.Data.DataSet {
        
        private prealertDataTable tableprealert;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DellPreAlert_Rev1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DellPreAlert_Rev1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["prealert"] != null)) {
                    base.Tables.Add(new prealertDataTable(ds.Tables["prealert"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public prealertDataTable prealert {
            get {
                return this.tableprealert;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DellPreAlert_Rev1 cln = ((DellPreAlert_Rev1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["prealert"] != null)) {
                    base.Tables.Add(new prealertDataTable(ds.Tables["prealert"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableprealert = ((prealertDataTable)(base.Tables["prealert"]));
            if ((initTable == true)) {
                if ((this.tableprealert != null)) {
                    this.tableprealert.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DellPreAlert_Rev1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DellPreAlert_Rev1.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableprealert = new prealertDataTable();
            base.Tables.Add(this.tableprealert);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprealert() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DellPreAlert_Rev1 ds = new DellPreAlert_Rev1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void prealertRowChangeEventHandler(object sender, prealertRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class prealertDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_RA_;
            
            private global::System.Data.DataColumn column_RTV_;
            
            private global::System.Data.DataColumn column_PO_;
            
            private global::System.Data.DataColumn columnSCN_LP;
            
            private global::System.Data.DataColumn columnPPID;
            
            private global::System.Data.DataColumn columnCARTON_ID;
            
            private global::System.Data.DataColumn column_DPS_;
            
            private global::System.Data.DataColumn column_PART_;
            
            private global::System.Data.DataColumn column_SERIAL_;
            
            private global::System.Data.DataColumn columnREASON_CODE;
            
            private global::System.Data.DataColumn columnCOST;
            
            private global::System.Data.DataColumn columnPROBLEM_DES;
            
            private global::System.Data.DataColumn columnSCAN_TIME;
            
            private global::System.Data.DataColumn columnQTY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertDataTable() {
                this.TableName = "prealert";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal prealertDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected prealertDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _RA_Column {
                get {
                    return this.column_RA_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _RTV_Column {
                get {
                    return this.column_RTV_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _PO_Column {
                get {
                    return this.column_PO_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCN_LPColumn {
                get {
                    return this.columnSCN_LP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPIDColumn {
                get {
                    return this.columnPPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CARTON_IDColumn {
                get {
                    return this.columnCARTON_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _DPS_Column {
                get {
                    return this.column_DPS_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _PART_Column {
                get {
                    return this.column_PART_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _SERIAL_Column {
                get {
                    return this.column_SERIAL_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASON_CODEColumn {
                get {
                    return this.columnREASON_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COSTColumn {
                get {
                    return this.columnCOST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROBLEM_DESColumn {
                get {
                    return this.columnPROBLEM_DES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCAN_TIMEColumn {
                get {
                    return this.columnSCAN_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTYColumn {
                get {
                    return this.columnQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertRow this[int index] {
                get {
                    return ((prealertRow)(this.Rows[index]));
                }
            }
            
            public event prealertRowChangeEventHandler prealertRowChanging;
            
            public event prealertRowChangeEventHandler prealertRowChanged;
            
            public event prealertRowChangeEventHandler prealertRowDeleting;
            
            public event prealertRowChangeEventHandler prealertRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprealertRow(prealertRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertRow AddprealertRow(string _RA_, string _RTV_, string _PO_, string SCN_LP, string PPID, string CARTON_ID, string _DPS_, string _PART_, string _SERIAL_, string REASON_CODE, long COST, string PROBLEM_DES, System.DateTime SCAN_TIME, int QTY) {
                prealertRow rowprealertRow = ((prealertRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _RA_,
                        _RTV_,
                        _PO_,
                        SCN_LP,
                        PPID,
                        CARTON_ID,
                        _DPS_,
                        _PART_,
                        _SERIAL_,
                        REASON_CODE,
                        COST,
                        PROBLEM_DES,
                        SCAN_TIME,
                        QTY};
                rowprealertRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprealertRow);
                return rowprealertRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                prealertDataTable cln = ((prealertDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new prealertDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_RA_ = base.Columns["RA#"];
                this.column_RTV_ = base.Columns["RTV#"];
                this.column_PO_ = base.Columns["PO#"];
                this.columnSCN_LP = base.Columns["SCN LP"];
                this.columnPPID = base.Columns["PPID"];
                this.columnCARTON_ID = base.Columns["CARTON ID"];
                this.column_DPS_ = base.Columns["DPS#"];
                this.column_PART_ = base.Columns["PART# "];
                this.column_SERIAL_ = base.Columns["SERIAL#"];
                this.columnREASON_CODE = base.Columns["REASON CODE"];
                this.columnCOST = base.Columns["COST"];
                this.columnPROBLEM_DES = base.Columns["PROBLEM DES"];
                this.columnSCAN_TIME = base.Columns["SCAN TIME"];
                this.columnQTY = base.Columns["QTY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_RA_ = new global::System.Data.DataColumn("RA#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_RA_);
                this.column_RTV_ = new global::System.Data.DataColumn("RTV#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_RTV_);
                this.column_PO_ = new global::System.Data.DataColumn("PO#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_PO_);
                this.columnSCN_LP = new global::System.Data.DataColumn("SCN LP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCN_LP);
                this.columnPPID = new global::System.Data.DataColumn("PPID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPID);
                this.columnCARTON_ID = new global::System.Data.DataColumn("CARTON ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCARTON_ID);
                this.column_DPS_ = new global::System.Data.DataColumn("DPS#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_DPS_);
                this.column_PART_ = new global::System.Data.DataColumn("PART# ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_PART_);
                this.column_SERIAL_ = new global::System.Data.DataColumn("SERIAL#", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_SERIAL_);
                this.columnREASON_CODE = new global::System.Data.DataColumn("REASON CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASON_CODE);
                this.columnCOST = new global::System.Data.DataColumn("COST", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOST);
                this.columnPROBLEM_DES = new global::System.Data.DataColumn("PROBLEM DES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROBLEM_DES);
                this.columnSCAN_TIME = new global::System.Data.DataColumn("SCAN TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCAN_TIME);
                this.columnQTY = new global::System.Data.DataColumn("QTY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTY);
                this.column_RA_.AllowDBNull = true;
                this.column_RTV_.AllowDBNull = true;
                this.column_PO_.AllowDBNull = true;
                this.columnSCN_LP.AllowDBNull = true;
                this.columnPPID.AllowDBNull = true;
                this.columnCARTON_ID.AllowDBNull = true;
                this.column_DPS_.AllowDBNull = true;
                this.column_PART_.AllowDBNull = true;
                this.column_SERIAL_.AllowDBNull = true;
                this.columnREASON_CODE.AllowDBNull = true;
                this.columnCOST.AllowDBNull = true;
                this.columnPROBLEM_DES.AllowDBNull = true;
                this.columnSCAN_TIME.AllowDBNull = true;
                this.columnQTY.AllowDBNull = true;
                this.columnQTY.DefaultValue = ((int)(1));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertRow NewprealertRow() {
                return ((prealertRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new prealertRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(prealertRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.prealertRowChanged != null)) {
                    this.prealertRowChanged(this, new prealertRowChangeEvent(((prealertRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.prealertRowChanging != null)) {
                    this.prealertRowChanging(this, new prealertRowChangeEvent(((prealertRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.prealertRowDeleted != null)) {
                    this.prealertRowDeleted(this, new prealertRowChangeEvent(((prealertRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.prealertRowDeleting != null)) {
                    this.prealertRowDeleting(this, new prealertRowChangeEvent(((prealertRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprealertRow(prealertRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DellPreAlert_Rev1 ds = new DellPreAlert_Rev1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "prealertDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class prealertRow : global::System.Data.DataRow {
            
            private prealertDataTable tableprealert;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal prealertRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprealert = ((prealertDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _RA_ {
                get {
                    return ((string)(this[this.tableprealert._RA_Column]));
                }
                set {
                    this[this.tableprealert._RA_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _RTV_ {
                get {
                    return ((string)(this[this.tableprealert._RTV_Column]));
                }
                set {
                    this[this.tableprealert._RTV_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _PO_ {
                get {
                    return ((string)(this[this.tableprealert._PO_Column]));
                }
                set {
                    this[this.tableprealert._PO_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCN_LP {
                get {
                    return ((string)(this[this.tableprealert.SCN_LPColumn]));
                }
                set {
                    this[this.tableprealert.SCN_LPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PPID {
                get {
                    return ((string)(this[this.tableprealert.PPIDColumn]));
                }
                set {
                    this[this.tableprealert.PPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CARTON_ID {
                get {
                    return ((string)(this[this.tableprealert.CARTON_IDColumn]));
                }
                set {
                    this[this.tableprealert.CARTON_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _DPS_ {
                get {
                    return ((string)(this[this.tableprealert._DPS_Column]));
                }
                set {
                    this[this.tableprealert._DPS_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _PART_ {
                get {
                    return ((string)(this[this.tableprealert._PART_Column]));
                }
                set {
                    this[this.tableprealert._PART_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _SERIAL_ {
                get {
                    return ((string)(this[this.tableprealert._SERIAL_Column]));
                }
                set {
                    this[this.tableprealert._SERIAL_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASON_CODE {
                get {
                    return ((string)(this[this.tableprealert.REASON_CODEColumn]));
                }
                set {
                    this[this.tableprealert.REASON_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long COST {
                get {
                    return ((long)(this[this.tableprealert.COSTColumn]));
                }
                set {
                    this[this.tableprealert.COSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROBLEM_DES {
                get {
                    return ((string)(this[this.tableprealert.PROBLEM_DESColumn]));
                }
                set {
                    this[this.tableprealert.PROBLEM_DESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SCAN_TIME {
                get {
                    return ((global::System.DateTime)(this[this.tableprealert.SCAN_TIMEColumn]));
                }
                set {
                    this[this.tableprealert.SCAN_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QTY {
                get {
                    return ((int)(this[this.tableprealert.QTYColumn]));
                }
                set {
                    this[this.tableprealert.QTYColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class prealertRowChangeEvent : global::System.EventArgs {
            
            private prealertRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertRowChangeEvent(prealertRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public prealertRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
